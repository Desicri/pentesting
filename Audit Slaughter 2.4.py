#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Seleniumaudit.py
#  
#  Copyright 2018 ROBERT CRAIG <Beaucraig11@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import time
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import NoSuchElementException, ElementNotVisibleException
import os, re
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from os import listdir
from os.path import isfile, join


##############################
#Opening BANNER
##############################
print (" ")
print (" ")
print ("""
  /$$$$$$                  /$$ /$$   /$$                                                
 /$$__  $$                | $$|__/  | $$                                                
| $$  \ $$ /$$   /$$  /$$$$$$$ /$$ /$$$$$$                                              
| $$$$$$$$| $$  | $$ /$$__  $$| $$|_  $$_/                                              
| $$__  $$| $$  | $$| $$  | $$| $$  | $$                                                
| $$  | $$| $$  | $$| $$  | $$| $$  | $$ /$$                                            
| $$  | $$|  $$$$$$/|  $$$$$$$| $$  |  $$$$/                                            
|__/  |__/ \______/  \_______/|__/   \___/                                              
                                                                                        
                                                                                        
                                                                                        
  /$$$$$$  /$$                               /$$         /$$                         /$$
 /$$__  $$| $$                              | $$        | $$                        | $$
| $$  \__/| $$  /$$$$$$  /$$   /$$  /$$$$$$ | $$$$$$$  /$$$$$$    /$$$$$$   /$$$$$$ | $$
|  $$$$$$ | $$ |____  $$| $$  | $$ /$$__  $$| $$__  $$|_  $$_/   /$$__  $$ /$$__  $$| $$
 \____  $$| $$  /$$$$$$$| $$  | $$| $$  \ $$| $$  \ $$  | $$    | $$$$$$$$| $$  \__/|__/
 /$$  \ $$| $$ /$$__  $$| $$  | $$| $$  | $$| $$  | $$  | $$ /$$| $$_____/| $$          
|  $$$$$$/| $$|  $$$$$$$|  $$$$$$/|  $$$$$$$| $$  | $$  |  $$$$/|  $$$$$$$| $$       /$$
 \______/ |__/ \_______/ \______/  \____  $$|__/  |__/   \___/   \_______/|__/      |__/
                                   /$$  \ $$                                            
                                  |  $$$$$$/                                            
                                   \______/                                             
   /$$$ /$$    /$$            /$$$$$$      /$$   /$$ /$$$                               
  /$$_/| $$   | $$           /$$__  $$    | $$  | $$|_  $$                              
 /$$/  | $$   | $$          |__/  \ $$    | $$  | $$  \  $$                             
| $$   |  $$ / $$/            /$$$$$$/    | $$$$$$$$   | $$                             
| $$    \  $$ $$/            /$$____/     |_____  $$   | $$                             
|  $$    \  $$$/            | $$                | $$   /$$/                             
 \  $$$   \  $/    /$$      | $$$$$$$$ /$$      | $$ /$$$/                              
  \___/    \_/    |__/      |________/|__/      |__/|___/  
  """)

print (" ")
print (" ")
print (" ")
print ("Thanks to Daniel Seleg for the original idea and some of the code.") 
print ("Hope this is helpful. -Beau Craig")
print (" ")
print (" ")
print (" ")
time.sleep(2)


print("\n                        Would you like to input canned-text recommendations?  \n")

uploadaudit = True    #a little if statement to see if people want recommendations
while uploadaudit: #these "sets" simply are simple loops.  
	input_Answer_Recommendations = input("Press 1 to input canned-recommendations. \n \nPress 2 to decline... \n \n  Response: ")
	if input_Answer_Recommendations == str(1) or input_Answer_Recommendations == str(2):
		if input_Answer_Recommendations == str(1):
			print("\n We'll put in that canned text...  \n")
		else:
			print("\n I guess you can copy-paste it yourself you accursed luddite! \n")	
		break	
	else:
		print("\n That is an invalid selection! 1 or 2 man! You can do it! \n")
time.sleep(2)
print ("Move the broser window where you can see it!")
print ("Also... This searches recursively! Do not put it in ROoT!")
time.sleep(2)
#Set Web Driver-----------
#driver = webdriver.Firefox()
#driver = webdriver.Chrome('C:\Windows/chromedriver')  # Optional argument, if not specified will search path. However, make sure the driver is in the path!
driver = webdriver.Chrome('C:\Windows/chromedriver')



#Navigate to CSO----------
driver.get('https://cso.tracesecurity.com/'); #Driver.get navigates acts like an HTTP Get request, so it will get a page

"""
#You can basically do autologin with this, but CSO is so slow it is buggy
#Defining the username box so we can manipulate it-----------
search_box_user = driver.find_element_by_name('username') #right click on a website form and you should see 'inspect', this will give you names, ids, etc.
search_box_user.send_keys('your cso login') #this acts like typing, basically sending keyboard keys. It can also send variables
time.sleep(1) # Let the user see what is happening

#Defining the password box so we can manipulate it---------------
search_box_password = driver.find_element_by_name('password') #right click on a website form and you should see 'inspect', this will give you names, ids, etc.
search_box_password.send_keys('your pass') #this acts like typing, basically sending keyboard keys
driver.find_element_by_id("LoginButton").click()
time.sleep(2) # Let the user see password form fill 
"""
#Navigate to summaries

print("\n                  Step 1: Navigate to the company and go to the first control in the audit... see Confluence for more details. \n")
#A simple program to pause
def pauser(): #this is a simple function to pasue and await user input
	input("\n                        Once at first control page, press any key to continue. \n")
	return
pauser()

actions = ActionChains(driver)
def pressEnter():	
	actions = ActionChains(driver)
	actions.send_keys(Keys.ENTER)   
	actions.pause(0.15)
	actions.perform()             #does all the actions
	actions.reset_actions()       #clearing the queue

def upload_recommendation():
	for filename in os.listdir('.'):
    #seeing if recommendation is in file name
		if ( "recommendation" in (str(filename))):
			
			with open(filename) as file_object:
				recommendation = file_object.readlines()
				
				while True:
					counter = 0
					try:
						name_box = driver.find_element_by_id('auditRecommendation')           #finding box to put in information
						name_box.send_keys(recommendation)      #sending text of recommendation
						
						break
					except KeyboardInterrupt:
						raise
					except:                            #Exception handling!
						counter += 1                                               #Keeping track of failures to load
						if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
							raise
						else:
							time.sleep(3) 
#First, a brief function to make a title suitable for uploading to a report based on filenames
def getTitleFromFilename(filename):
    # strip off preceding directory information
    title = os.path.basename(filename)

    # get rid of file extension
    #title = os.path.splitext(title)[0]

    # remove trailing numbers (used for multi-part files)
    #title = re.sub('\.\d+$', '', title)

    # replace '%' with '/' so that you can enter things like "http:%%" in a 
    # filename and get the tool to put in "http://"
    title = re.sub('%', '/', title)

    # The maximum length of a title in a report is 70
    #if len(title) > 70:
    #   raise Exception("Figure title too long")
    return title[:70]


# Function to click the 'upload' button, in audit. Upolads a file, strip off the extension, and puts that as the title
failures= 0
def audit_uploader(filename):
	counter = 0
	
	while True:    #This is a way to handle exceptions and retry... i should have made it into a function, instead I repeat it a bunch... dumb
		try:
			upload_file = driver.find_element_by_link_text('Upload or Select File')
			#upload_file = driver.find_element_by_css_selector('#addResource > span > div') #clicking close
			
			upload_file.click()
			
			break
		except KeyboardInterrupt:
			raise
		except:                            #Exception handling!
			counter += 1                                               #Keeping track of failures to load
			if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
				raise
			else:
				time.sleep(3)                                            #Sleeping for a moment so the page can load
				
			
	counter = 0			
				#Upload or Select File
				
	while True:    #This is a way to handle exceptions and retry... i should have made it into a function, instead I repeat it a bunch... dumb
		try:
			upload_file_radio = driver.find_element_by_css_selector('#resourceMethodRow > td.FormContent > label:nth-child(2) > input[type="radio"]') #clicking close
			upload_file_radio.click()
			
			break
		except KeyboardInterrupt:
			raise
		except:                            #Exception handling!
			counter += 1                                               #Keeping track of failures to load
			if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
				raise
			else:
				time.sleep(3)                                            #Sleeping for a moment so the page can load
				
			
	counter = 0
	
	while True:
		counter = 0
		try:
			name_box = driver.find_element_by_id('name')           #finding box to put in information
			name_box.send_keys(getTitleFromFilename(filename))      #sending filename that has path stripped form it
			
			break
		except KeyboardInterrupt:
			raise
		except:                            #Exception handling!
			counter += 1                                               #Keeping track of failures to load
			if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
				raise
			else:
				time.sleep(3)                                            #Sleeping for a moment so the page can load
		
	time.sleep(1)		
	counter = 0		
	
	while True:
		try:
			file_input = driver.find_element_by_name('file')    #Finds place to sentd files. Next lien sends file straight to uploader
			
			file_input.send_keys(filename)
			
			break
		except KeyboardInterrupt:
			raise
		except:                            #Exception handling!
			counter += 1                                               #Keeping track of failures to load
			if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
				raise
			else:
				time.sleep(3)                                            #Sleeping for a moment so the page can load
				
	
	counter = 0
	
	while True:
		try:
			save_close = driver.find_element_by_css_selector('#SaveAndCloseButtontsactionbeansmyassignmentsVerifyAuditControlResourcePropertiesActionBean') #clicking close
			save_close.click()
			break
		except KeyboardInterrupt:
			raise
		except:                            #Exception handling!
			counter += 1                                               #Keeping track of failures to load
			if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
				raise
			else:
				time.sleep(3)                                            #Sleeping for a moment so the page can load
		
	counter = 0
	

def audit_uploader_next():
	counter = 0
	print ("++++++++++++++++++++++changing the window++++++++++++++++++++++++++++")  
	while True:
		try:
			
			save_and_next = driver.find_element_by_id('SaveAndNextButtonQuestion') #clicking close
			save_and_next.click()
			time.sleep(3)
			break
		except KeyboardInterrupt:
			raise
		except:                            #Exception handling!
			counter += 1                                               #Keeping track of failures to load
			if counter > 40:                                         #If this happens forty times... well... then it will break out nad raise an exception. If less than 40 sleeps for a second
				raise
			else:
				time.sleep(3)                                            #Sleeping for a moment so the page can load
		
	counter = 0
	



currentLocation = os.getcwd()                   #get current path
fullPath = (currentLocation +'\\')   #current path plus \\
print (" ")
time.sleep(1)

#Buiding out list of all files in the directory and subdirectories to be uploaded
#This is a very tricky portion with 4 loops
#Loop 1 is a full os.walk. Everything in the directory and every subfolder is hit
#Loop 2 Is a for loop to target subdirectories. It changes the path to the subdirectory 
#Loop 3 While we are in an individual subdirectory we do naother os.walk, this time looking for files... 
#Loop 4 For each file in we do a test to see if it is a certain name, if it is not we find the path using os.join.path add the name and then pass it along to our function audit_uploader
#At the end of loop 4 we go the next screen and we switch back to the original path

#In English: Loop1: Find All subfolders, loop 2 take those subfolders and switch into the subdriectory, so Loop3 3 can find all files and subfolder in that group and loop4 can take each file and give it to audit uploader
currentLocation = os.getcwd()
changeWindow = False
#Loop 1
for path, subdirs, files in os.walk(fullPath):                 #Searches through directories and subdirectories for files
	#Loop 2
	for sub in subdirs:                                             #Going through subdirectories in a for loop
		print (" ")
		print (" ")
		print ("The subsdirectory name is " + sub + "--------------------------------------------")
		print ("The files are: ")
		print (" ")
		os.chdir(fullPath + sub)                                       #changing path to the subdirectory because we want to limit our next os.walk
		newdir = (os.getcwd())                                         #just setting the current directory to a variable 
		#Loop 3                                   
		for path, subdirs, files2 in os.walk(newdir):                  #used files2 just to avoid possible confusion
			#Loop 4
			for name2 in files2:
				time.sleep(1)
				print ("We found " + name2)		
				if not (name2 == "audit 2.3 upload pub" or name2== "Thumbs.db" or name2 == 'Uploaded.txt' or name2 == 'debug.log' or name2 == "audit 2.0.py" or name2 == "" or "recommendation" in name2):    #Thumbs.db is a random hidden windows file. CSO cannot accept certain file inputs.
					print (os.path.join(path, name2))                    #adding the file path to the file name and printing it
					
					audit_uploader(os.path.join(path, name2))             #This is where we call our enormous function
				else:
					print ("None Useful File Found/Recommendation File Found")
					
					#break
			time.sleep(1)
			print ("")
			if (os.getcwd() == currentLocation):
				print ("Skipping window change, direcotry not useful")		
			else:
				if (input_Answer_Recommendations == str(1)):
					upload_recommendation()                                             #uploading our recommendations via a function
				time.sleep(3)                                                             #sleep here really just gives you time to see what was written
                                              														#switchching to next page in audit, save and next
				audit_uploader_next()
				
				
			time.sleep(1)
			os.chdir(fullPath)                                             #changing back to original path
		
print (" ")


"""
#THIS IS THE BIG FUNCTION CALL: This is a for loop which takes appendix_list and then runs our functions
file_uploaded = open( 'Uploaded.txt', 'w' )      #opening autoinput.txt
for filename in actionlist:     
	print(filename)
	audit_uploader(filename)
	#adding to upload list
	file_uploaded.write("%s\n" + filename)                        #appending each line in nmap filed and appending it into a list
file_uploaded.close()
"""


#Giving the user a chance to save.... then shutting it down	
def pauser2(): #this is a simple function to await user input
	input("\n  You can press a key to close the web browser and the program. Logout of CSO too! Be kind to it! \n")
	return
pauser2()
driver.quit()

