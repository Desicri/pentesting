#!/bin/bash
#Run Bash site
ntptestfind(){  
	ipsNTP=$(cat ntpUDPips.txt | tr '\n' ' ')
	mkdir ntptests
	for i in ${ipsNTP[@]}
	do
		touch ntptest$i.rc	
		echo "use auxiliary/scanner/ntp/ntp_peer_list_dos">>ntptest$i.rc 
		echo "set RHOSTS $i">>ntptest$i.rc 
		echo "run">>ntptest$i.rc
		echo
		echo "use auxiliary/scanner/ntp/ntp_peer_list_sum_dos">>ntptest$i.rc 
		echo "set RHOSTS $i">>ntptest$i.rc 
		echo "run">>ntptest$i.rc
		echo
		echo "use auxiliary/scanner/ntp/ntp_req_nonce_dos">>ntptest$i.rc 
		echo "set RHOSTS $i">>ntptest$i.rc 
		echo "run">>ntptest$i.rc
	  	echo
		echo "use auxiliary/scanner/ntp/ntp_reslist_dos">>ntptest$i.rc 
		echo "set RHOSTS $i">>ntptest$i.rc 
		echo "run">>ntptest$i.rc
		echo
		echo "use auxiliary/scanner/ntp/ntp_unsettrap_dos">>ntptest$i.rc 
		echo "set RHOSTS $i">>ntptest$i.rc 
		echo "run">>ntptest$i.rc
		echo
		echo "exit">>ntptest$i.rc
		msfconsole -r ntptest$i.rc | tee $i."NTPtests";
		sleep 1;
		sleep 1;
		mv $i."NTPtests" -t ntptests
		sleep 1;
		echo
		echo
		rm ntptest$i.rc;
	done
return 0
}
	

#CALLING FUNCTION
#Calling function to check if a parameter was passed. If nothing is passed this is skipped.
#
echo
ntptestfind;
sleep 2;

#CLEAR SCREEN
clear #clears screen

#SCREENSHOTS!
cd ntptests #changing directory
find *NTPtests* 2> /dev/null
if [ $? -eq 0 ] #Looking at the exit code of the previous command to see if we should run this code
then
	echo "Taking screenshots... make sure we are on fullscreen!"
	mkdir "NTPScreenshots"
	IFS="$(printf '\n\t')" #setting the delimiter to ignore spaces
	find *NTPtests* > screenarray.txt
	readarray NTPscans < screenarray.txt	
#sslscans=$[ find *sslscan* ] #creates a list of the sslscan files and  puts it into a variable
	#
	for i in ${NTPscans[@]}
	do
		clear
		metaint=$(cat $i | grep -n "metasploit v4" | cut -d ":" -f 1); #Fidn out "where do metasploit graphics end?" 
		one=1; #need to subtract one from the end point
		COUNT=`expr $metaint - $one`; #getting the final number
		sed -i -e 1,"$COUNT"d $i

		linecount=$(wc -l "$i" | cut -d " " -f 1) 	#cuts and prints the line count number. Basically, "How many lines are in this file $i "?
		if [ "$linecount" -gt 98 ]              	#check to see if the line count in the file is greater than 98. That's about two full screens in the terminal at regular view. 
			then	
			split -l 49 -d $i;               	#splits the file by 50 lines, the d is for numbers, file is $i
			cat x00;                     		#cats the first split file named x00
			gnome-screenshot -w -b -f "$i 1.png";   #screenshot
			clear;
			cat x01;     				#cats the second split file named x01	
			gnome-screenshot -w -b -f "$i 2.png";   #screenshot
			clear;
			cat x02;     				#cats the second split file named x01
			gnome-screenshot -w -b -f "$i 3.png";   #screenshot
			clear;
			mv "$i 1.png" ./NTPScreenshots;		#moves screenshots
			mv "$i 2.png" ./NTPScreenshots;
			mv "$i 3.png" ./NTPScreenshots;
			sleep 0.5;
			rm x00;					#deletes split files
			rm x01;
			rm x02;
			sleep 0.5;
		elif [ "$linecount" -gt 48 ]              	#check to see if the line count in the file is greater than 48. That's about two full screens in the terminal at regular view. 
			then	
			split -l 48 -d $i;               	#splits the file by 50 lines, the d is for numbers, file is $i
			cat x00;                     	#cats the first split file named x00
			gnome-screenshot -w -b -f "$i 1.png";   #screenshot
			clear;
			cat x01;     				#cats the second split file named x01
			gnome-screenshot -w -b -f "$i 2.png";    #screenshot
			clear;
			mv "$i 1.png" ./NTPScreenshots;		#moves screenshots
			mv "$i 2.png" ./NTPScreenshots;
			sleep 0.5;
			rm x00;					#deletes split files
			rm x01;
			sleep 0.5; 
		
		else		
			cat $i;					#cats the sslscan
			gnome-screenshot -w -b -f $i.png;	#screenshot
			mv $i.png ./NTPScreenshots;		#moves it to the screenshots folder
		fi
	clear
	sleep 0.5;
	done
fi

